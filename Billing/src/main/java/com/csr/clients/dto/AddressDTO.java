/*
 * Generated by XDoclet - Do not edit!
 */
package com.csr.clients.dto;

/**
 * Value object for AddressEntity.
 *
 * Notice, this object is used to represent the state of an 
 * AddressEntity object. This value object
 * Is not connected to the database in any way, it is just a normal object used 
 * as a container for data from an EJB. 
 *
 */
public class AddressDTO
   //extends com.csr.common.dto.BaseDTO
   implements java.io.Serializable, java.lang.Cloneable 
{

   private java.lang.Integer addressID;
   private boolean addressIDHasBeenSet = false;

   private java.lang.Integer clientID;
   private boolean clientIDHasBeenSet = false;

   private java.lang.String address1;
   private boolean address1HasBeenSet = false;

   private java.lang.String address2;
   private boolean address2HasBeenSet = false;

   private java.lang.String address3;
   private boolean address3HasBeenSet = false;

   private java.lang.String city;
   private boolean cityHasBeenSet = false;

   private java.lang.String state;
   private boolean stateHasBeenSet = false;

   private java.lang.String postalCode;
   private boolean postalCodeHasBeenSet = false;

   private java.lang.String country;
   private boolean countryHasBeenSet = false;

   private java.lang.String addressType;
   private boolean addressTypeHasBeenSet = false;

   private java.lang.Integer primaryKey;

   public AddressDTO()
   {
   }

   public AddressDTO( java.lang.Integer addressID,java.lang.Integer clientID,java.lang.String address1,java.lang.String address2,java.lang.String address3,java.lang.String city,java.lang.String state,java.lang.String postalCode,java.lang.String country,java.lang.String addressType )
   {
       setAddressID(addressID);
       setClientID(clientID);
       setAddress1(address1);
       setAddress2(address2);
       setAddress3(address3);
       setCity(city);
       setState(state);
       setPostalCode(postalCode);
       setCountry(country);
       setAddressType(addressType);
	   primaryKey = this.getAddressID();
   }

   /**
    * @deprecated use {@link #clone}
    */
   public AddressDTO( AddressDTO otherValue )
   {
	  this.addressID = otherValue.addressID;
	  addressIDHasBeenSet = true;
	  this.clientID = otherValue.clientID;
	  clientIDHasBeenSet = true;
	  this.address1 = otherValue.address1;
	  address1HasBeenSet = true;
	  this.address2 = otherValue.address2;
	  address2HasBeenSet = true;
	  this.address3 = otherValue.address3;
	  address3HasBeenSet = true;
	  this.city = otherValue.city;
	  cityHasBeenSet = true;
	  this.state = otherValue.state;
	  stateHasBeenSet = true;
	  this.postalCode = otherValue.postalCode;
	  postalCodeHasBeenSet = true;
	  this.country = otherValue.country;
	  countryHasBeenSet = true;
	  this.addressType = otherValue.addressType;
	  addressTypeHasBeenSet = true;

	  primaryKey = this.getAddressID();
   }

   public java.lang.Integer getPrimaryKey()
   {
	  return primaryKey;
   }

   public void setPrimaryKey( java.lang.Integer primaryKey)
   {
      // it's also nice to update PK object - just in case
      // somebody would ask for it later...
      this.primaryKey = primaryKey;
	  setAddressID( primaryKey );
   }

   public java.lang.Integer getAddressID()
   {
	  return this.addressID;
   }

   public void setAddressID( java.lang.Integer addressID )
   {
	  this.addressID = addressID;
	  addressIDHasBeenSet = true;

      primaryKey = addressID;
   }

   public boolean addressIDHasBeenSet(){
	  return addressIDHasBeenSet;
   }
   public java.lang.Integer getClientID()
   {
	  return this.clientID;
   }

   public void setClientID( java.lang.Integer clientID )
   {
	  this.clientID = clientID;
	  clientIDHasBeenSet = true;

   }

   public boolean clientIDHasBeenSet(){
	  return clientIDHasBeenSet;
   }
   public java.lang.String getAddress1()
   {
	  return this.address1;
   }

   public void setAddress1( java.lang.String address1 )
   {
	  this.address1 = address1;
	  address1HasBeenSet = true;

   }

   public boolean address1HasBeenSet(){
	  return address1HasBeenSet;
   }
   public java.lang.String getAddress2()
   {
	  return this.address2;
   }

   public void setAddress2( java.lang.String address2 )
   {
	  this.address2 = address2;
	  address2HasBeenSet = true;

   }

   public boolean address2HasBeenSet(){
	  return address2HasBeenSet;
   }
   public java.lang.String getAddress3()
   {
	  return this.address3;
   }

   public void setAddress3( java.lang.String address3 )
   {
	  this.address3 = address3;
	  address3HasBeenSet = true;

   }

   public boolean address3HasBeenSet(){
	  return address3HasBeenSet;
   }
   public java.lang.String getCity()
   {
	  return this.city;
   }

   public void setCity( java.lang.String city )
   {
	  this.city = city;
	  cityHasBeenSet = true;

   }

   public boolean cityHasBeenSet(){
	  return cityHasBeenSet;
   }
   public java.lang.String getState()
   {
	  return this.state;
   }

   public void setState( java.lang.String state )
   {
	  this.state = state;
	  stateHasBeenSet = true;

   }

   public boolean stateHasBeenSet(){
	  return stateHasBeenSet;
   }
   public java.lang.String getPostalCode()
   {
	  return this.postalCode;
   }

   public void setPostalCode( java.lang.String postalCode )
   {
	  this.postalCode = postalCode;
	  postalCodeHasBeenSet = true;

   }

   public boolean postalCodeHasBeenSet(){
	  return postalCodeHasBeenSet;
   }
   public java.lang.String getCountry()
   {
	  return this.country;
   }

   public void setCountry( java.lang.String country )
   {
	  this.country = country;
	  countryHasBeenSet = true;

   }

   public boolean countryHasBeenSet(){
	  return countryHasBeenSet;
   }
   public java.lang.String getAddressType()
   {
	  return this.addressType;
   }

   public void setAddressType( java.lang.String addressType )
   {
	  this.addressType = addressType;
	  addressTypeHasBeenSet = true;

   }

   public boolean addressTypeHasBeenSet(){
	  return addressTypeHasBeenSet;
   }

   public String toString()
   {
	  StringBuffer str = new StringBuffer("{");

	  str.append("addressID=" + getAddressID() + " " + "clientID=" + getClientID() + " " + "address1=" + getAddress1() + " " + "address2=" + getAddress2() + " " + "address3=" + getAddress3() + " " + "city=" + getCity() + " " + "state=" + getState() + " " + "postalCode=" + getPostalCode() + " " + "country=" + getCountry() + " " + "addressType=" + getAddressType());
	  str.append('}');

	  return(str.toString());
   }

   /**
    * A Value Object has an identity if the attributes making its Primary Key have all been set. An object without identity is never equal to any other object.
    *
    * @return true if this instance has an identity.
    */
   protected boolean hasIdentity()
   {
	  return addressIDHasBeenSet;
   }

   /**
    *
    * @deprecated use {@link #equals}
    */
   public boolean isIdentical(Object other)
   {
          if (other instanceof AddressDTO)
          {
                 AddressDTO that = (AddressDTO) other;
                 boolean lEquals = true;
                 if( this.clientID == null )
                 {
                        lEquals = lEquals && ( that.clientID == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.clientID.equals( that.clientID );
                 }
                 if( this.address1 == null )
                 {
                        lEquals = lEquals && ( that.address1 == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.address1.equals( that.address1 );
                 }
                 if( this.address2 == null )
                 {
                        lEquals = lEquals && ( that.address2 == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.address2.equals( that.address2 );
                 }
                 if( this.address3 == null )
                 {
                        lEquals = lEquals && ( that.address3 == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.address3.equals( that.address3 );
                 }
                 if( this.city == null )
                 {
                        lEquals = lEquals && ( that.city == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.city.equals( that.city );
                 }
                 if( this.state == null )
                 {
                        lEquals = lEquals && ( that.state == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.state.equals( that.state );
                 }
                 if( this.postalCode == null )
                 {
                        lEquals = lEquals && ( that.postalCode == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.postalCode.equals( that.postalCode );
                 }
                 if( this.country == null )
                 {
                        lEquals = lEquals && ( that.country == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.country.equals( that.country );
                 }
                 if( this.addressType == null )
                 {
                        lEquals = lEquals && ( that.addressType == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.addressType.equals( that.addressType );
                 }

                 return lEquals;
          }
          else
          {
                 return false;
          }
   }

    public boolean equals(Object other) {

        //If it's not the correct type, clearly it isn't equal to this.
        if (!(other instanceof AddressDTO)) { 
            return false;
        }

        return equals((AddressDTO) other);
    }

    /**
     * This class is not using strict ordering. This means that the object is not Comparable, and
     * each check for equality will test all members for equality. We do not check collections for
     * equality however, so you would be wise to not use this if you have collection typed EJB References.
     */
    public boolean equals(AddressDTO that) {

        //try to get lucky.
        if (this == that) {
            return true;
        }
        //this clearly isn't null.
        if(null == that) {
            return false;
        }

        if(this.addressID != that.addressID) {

            if( this.addressID == null || that.addressID == null ) {
                return false;
            }

            if(!this.addressID.equals(that.addressID)) {
                return false;
            }

        }

        if(this.clientID != that.clientID) {

            if( this.clientID == null || that.clientID == null ) {
                return false;
            }

            if(!this.clientID.equals(that.clientID)) {
                return false;
            }

        }

        if(this.address1 != that.address1) {

            if( this.address1 == null || that.address1 == null ) {
                return false;
            }

            if(!this.address1.equals(that.address1)) {
                return false;
            }

        }

        if(this.address2 != that.address2) {

            if( this.address2 == null || that.address2 == null ) {
                return false;
            }

            if(!this.address2.equals(that.address2)) {
                return false;
            }

        }

        if(this.address3 != that.address3) {

            if( this.address3 == null || that.address3 == null ) {
                return false;
            }

            if(!this.address3.equals(that.address3)) {
                return false;
            }

        }

        if(this.city != that.city) {

            if( this.city == null || that.city == null ) {
                return false;
            }

            if(!this.city.equals(that.city)) {
                return false;
            }

        }

        if(this.state != that.state) {

            if( this.state == null || that.state == null ) {
                return false;
            }

            if(!this.state.equals(that.state)) {
                return false;
            }

        }

        if(this.postalCode != that.postalCode) {

            if( this.postalCode == null || that.postalCode == null ) {
                return false;
            }

            if(!this.postalCode.equals(that.postalCode)) {
                return false;
            }

        }

        if(this.country != that.country) {

            if( this.country == null || that.country == null ) {
                return false;
            }

            if(!this.country.equals(that.country)) {
                return false;
            }

        }

        if(this.addressType != that.addressType) {

            if( this.addressType == null || that.addressType == null ) {
                return false;
            }

            if(!this.addressType.equals(that.addressType)) {
                return false;
            }

        }

        return true;

    }

    public Object clone() throws java.lang.CloneNotSupportedException {
        AddressDTO other = (AddressDTO) super.clone();

        return other;
    }

    public ReadOnlyAddressDTO getReadOnlyAddressDTO() {
        return new ReadOnlyAddressDTO();
    }

    public int hashCode(){
	  int result = 17;
      result = 37*result + ((this.addressID != null) ? this.addressID.hashCode() : 0);

      result = 37*result + ((this.clientID != null) ? this.clientID.hashCode() : 0);

      result = 37*result + ((this.address1 != null) ? this.address1.hashCode() : 0);

      result = 37*result + ((this.address2 != null) ? this.address2.hashCode() : 0);

      result = 37*result + ((this.address3 != null) ? this.address3.hashCode() : 0);

      result = 37*result + ((this.city != null) ? this.city.hashCode() : 0);

      result = 37*result + ((this.state != null) ? this.state.hashCode() : 0);

      result = 37*result + ((this.postalCode != null) ? this.postalCode.hashCode() : 0);

      result = 37*result + ((this.country != null) ? this.country.hashCode() : 0);

      result = 37*result + ((this.addressType != null) ? this.addressType.hashCode() : 0);

	  return result;
    }

    /**
     * Covariant function so the compiler can choose the proper one at compile time,
     * eliminates the need for XDoclet to really understand compiletime typing.
     *
     * Read only collections need to be synchronized. Once we start giving out handles
     * to these collections, they'll be used in other threads sooner or later. 
     */
    private static java.util.Collection wrapCollection(java.util.Collection input) {
        return java.util.Collections.synchronizedCollection(input);
    }
    /**
     * Covariant function so the compiler can choose the proper one at compile time,
     * eliminates the need for XDoclet to really understand compiletime typing.
     *
     * Read only collections need to be synchronized. Once we start giving out handles
     * to these collections, they'll be used in other threads sooner or later. 
     */
    private static java.util.Set wrapCollection(java.util.Set input) {
        return java.util.Collections.synchronizedSet(input);
    }
    /**
     * Covariant function. This is used in covariant form so that the compiler
     * can do some of our conditional branches for us. If I made these functions
     * have different names, then XDoclet would have to choose between them based on 
     * compiletime types, that wouldn't be easy. 
     */
    private static java.util.Collection wrapReadOnly(java.util.Collection input) {
        return java.util.Collections.unmodifiableCollection(input);
    }
    /**
     * Covariant function. This is used in covariant form so that the compiler
     * can do some of our conditional branches for us. If I made these functions
     * have different names, then XDoclet would have to choose between them based on 
     * compiletime types, that wouldn't be easy. 
     */
    private static java.util.Set wrapReadOnly(java.util.Set input) {
        return java.util.Collections.unmodifiableSet(input);
    }

    private final class ReadOnlyAddressDTO 
    implements java.lang.Cloneable, java.io.Serializable 
    {
        private AddressDTO underlying() {
            return AddressDTO.this;
        }

       public java.lang.Integer getAddressID() {
              return underlying().addressID;
       }

       public java.lang.Integer getClientID() {
              return underlying().clientID;
       }

       public java.lang.String getAddress1() {
              return underlying().address1;
       }

       public java.lang.String getAddress2() {
              return underlying().address2;
       }

       public java.lang.String getAddress3() {
              return underlying().address3;
       }

       public java.lang.String getCity() {
              return underlying().city;
       }

       public java.lang.String getState() {
              return underlying().state;
       }

       public java.lang.String getPostalCode() {
              return underlying().postalCode;
       }

       public java.lang.String getCountry() {
              return underlying().country;
       }

       public java.lang.String getAddressType() {
              return underlying().addressType;
       }

        public int hashCode() {
            return 101 * underlying().hashCode();
        }

        public boolean equals(Object o) {
            if(o instanceof ReadOnlyAddressDTO) {
                return this.equals((ReadOnlyAddressDTO) o);
            }
            return false;
        }

        public boolean equals(ReadOnlyAddressDTO that) {
            if(null == that) {
                return false;
            }

            return this.underlying().equals(that.underlying());
        }

    }

}
