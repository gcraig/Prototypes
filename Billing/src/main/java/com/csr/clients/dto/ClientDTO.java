/*
 * Generated by XDoclet - Do not edit!
 */
package com.csr.clients.dto;

/**
 * Value object for ClientEntity.
 *
 * Notice, this object is used to represent the state of an 
 * ClientEntity object. This value object
 * Is not connected to the database in any way, it is just a normal object used 
 * as a container for data from an EJB. 
 *
 */
public class ClientDTO
//   extends com.csr.common.dto.BaseDTO
   implements java.io.Serializable, java.lang.Cloneable 
{

   private java.lang.Integer clientID;
   private boolean clientIDHasBeenSet = false;

   private java.lang.String clientName;
   private boolean clientNameHasBeenSet = false;

   private java.lang.String clientNumber;
   private boolean clientNumberHasBeenSet = false;

   private java.lang.Double creditLimit;
   private boolean creditLimitHasBeenSet = false;

   private java.lang.Boolean billable;
   private boolean billableHasBeenSet = false;

   private java.lang.Integer primaryKey;
	private String rownumber;
	public void setRownumber(String r)
	{
		this.rownumber = r;
	}

	public String getRownumber()
	{
		return this.rownumber;
	}


   public ClientDTO()
   {
   }

   public ClientDTO( java.lang.Integer clientID,java.lang.String clientName,java.lang.String clientNumber,java.lang.Double creditLimit,java.lang.Boolean billable )
   {
       setClientID(clientID);
       setClientName(clientName);
       setClientNumber(clientNumber);
       setCreditLimit(creditLimit);
       setBillable(billable);
	   primaryKey = this.getClientID();
   }

   /**
    * @deprecated use {@link #clone}
    */
   public ClientDTO( ClientDTO otherValue )
   {
	  this.clientID = otherValue.clientID;
	  clientIDHasBeenSet = true;
	  this.clientName = otherValue.clientName;
	  clientNameHasBeenSet = true;
	  this.clientNumber = otherValue.clientNumber;
	  clientNumberHasBeenSet = true;
	  this.creditLimit = otherValue.creditLimit;
	  creditLimitHasBeenSet = true;
	  this.billable = otherValue.billable;
	  billableHasBeenSet = true;

	  primaryKey = this.getClientID();
   }

   public java.lang.Integer getPrimaryKey()
   {
	  return primaryKey;
   }

   public void setPrimaryKey( java.lang.Integer primaryKey)
   {
      // it's also nice to update PK object - just in case
      // somebody would ask for it later...
      this.primaryKey = primaryKey;
	  setClientID( primaryKey );
   }

   public java.lang.Integer getClientID()
   {
	  return this.clientID;
   }

   public void setClientID( java.lang.Integer clientID )
   {
	  this.clientID = clientID;
	  clientIDHasBeenSet = true;

      primaryKey = clientID;
   }

   public boolean clientIDHasBeenSet(){
	  return clientIDHasBeenSet;
   }
   public java.lang.String getClientName()
   {
	  return this.clientName;
   }

   public void setClientName( java.lang.String clientName )
   {
	  this.clientName = clientName;
	  clientNameHasBeenSet = true;

   }

   public boolean clientNameHasBeenSet(){
	  return clientNameHasBeenSet;
   }
   public java.lang.String getClientNumber()
   {
	  return this.clientNumber;
   }

   public void setClientNumber( java.lang.String clientNumber )
   {
	  this.clientNumber = clientNumber;
	  clientNumberHasBeenSet = true;

   }

   public boolean clientNumberHasBeenSet(){
	  return clientNumberHasBeenSet;
   }
   public java.lang.Double getCreditLimit()
   {
	  return this.creditLimit;
   }

   public void setCreditLimit( java.lang.Double creditLimit )
   {
	  this.creditLimit = creditLimit;
	  creditLimitHasBeenSet = true;

   }

   public boolean creditLimitHasBeenSet(){
	  return creditLimitHasBeenSet;
   }
   public java.lang.Boolean getBillable()
   {
	  return this.billable;
   }

   public void setBillable( java.lang.Boolean billable )
   {
	  this.billable = billable;
	  billableHasBeenSet = true;

   }

   public boolean billableHasBeenSet(){
	  return billableHasBeenSet;
   }

   public String toString()
   {
	  StringBuffer str = new StringBuffer("{");

	  str.append("clientID=" + getClientID() + " " + "clientName=" + getClientName() + " " + "clientNumber=" + getClientNumber() + " " + "creditLimit=" + getCreditLimit() + " " + "billable=" + getBillable());
	  str.append('}');

	  return(str.toString());
   }

   /**
    * A Value Object has an identity if the attributes making its Primary Key have all been set. An object without identity is never equal to any other object.
    *
    * @return true if this instance has an identity.
    */
   protected boolean hasIdentity()
   {
	  return clientIDHasBeenSet;
   }

   /**
    *
    * @deprecated use {@link #equals}
    */
   public boolean isIdentical(Object other)
   {
          if (other instanceof ClientDTO)
          {
                 ClientDTO that = (ClientDTO) other;
                 boolean lEquals = true;
                 if( this.clientName == null )
                 {
                        lEquals = lEquals && ( that.clientName == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.clientName.equals( that.clientName );
                 }
                 if( this.clientNumber == null )
                 {
                        lEquals = lEquals && ( that.clientNumber == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.clientNumber.equals( that.clientNumber );
                 }
                 if( this.creditLimit == null )
                 {
                        lEquals = lEquals && ( that.creditLimit == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.creditLimit.equals( that.creditLimit );
                 }
                 if( this.billable == null )
                 {
                        lEquals = lEquals && ( that.billable == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.billable.equals( that.billable );
                 }

                 return lEquals;
          }
          else
          {
                 return false;
          }
   }

    public boolean equals(Object other) {

        //If it's not the correct type, clearly it isn't equal to this.
        if (!(other instanceof ClientDTO)) { 
            return false;
        }

        return equals((ClientDTO) other);
    }

    /**
     * This class is not using strict ordering. This means that the object is not Comparable, and
     * each check for equality will test all members for equality. We do not check collections for
     * equality however, so you would be wise to not use this if you have collection typed EJB References.
     */
    public boolean equals(ClientDTO that) {

        //try to get lucky.
        if (this == that) {
            return true;
        }
        //this clearly isn't null.
        if(null == that) {
            return false;
        }

        if(this.clientID != that.clientID) {

            if( this.clientID == null || that.clientID == null ) {
                return false;
            }

            if(!this.clientID.equals(that.clientID)) {
                return false;
            }

        }

        if(this.clientName != that.clientName) {

            if( this.clientName == null || that.clientName == null ) {
                return false;
            }

            if(!this.clientName.equals(that.clientName)) {
                return false;
            }

        }

        if(this.clientNumber != that.clientNumber) {

            if( this.clientNumber == null || that.clientNumber == null ) {
                return false;
            }

            if(!this.clientNumber.equals(that.clientNumber)) {
                return false;
            }

        }

        if(this.creditLimit != that.creditLimit) {

            if( this.creditLimit == null || that.creditLimit == null ) {
                return false;
            }

            if(!this.creditLimit.equals(that.creditLimit)) {
                return false;
            }

        }

        if(this.billable != that.billable) {

            if( this.billable == null || that.billable == null ) {
                return false;
            }

            if(!this.billable.equals(that.billable)) {
                return false;
            }

        }

        return true;

    }

    public Object clone() throws java.lang.CloneNotSupportedException {
        ClientDTO other = (ClientDTO) super.clone();

        return other;
    }

    public ReadOnlyClientDTO getReadOnlyClientDTO() {
        return new ReadOnlyClientDTO();
    }

    public int hashCode(){
	  int result = 17;
      result = 37*result + ((this.clientID != null) ? this.clientID.hashCode() : 0);

      result = 37*result + ((this.clientName != null) ? this.clientName.hashCode() : 0);

      result = 37*result + ((this.clientNumber != null) ? this.clientNumber.hashCode() : 0);

      result = 37*result + ((this.creditLimit != null) ? this.creditLimit.hashCode() : 0);

      result = 37*result + ((this.billable != null) ? this.billable.hashCode() : 0);

	  return result;
    }

    /**
     * Covariant function so the compiler can choose the proper one at compile time,
     * eliminates the need for XDoclet to really understand compiletime typing.
     *
     * Read only collections need to be synchronized. Once we start giving out handles
     * to these collections, they'll be used in other threads sooner or later. 
     */
    private static java.util.Collection wrapCollection(java.util.Collection input) {
        return java.util.Collections.synchronizedCollection(input);
    }
    /**
     * Covariant function so the compiler can choose the proper one at compile time,
     * eliminates the need for XDoclet to really understand compiletime typing.
     *
     * Read only collections need to be synchronized. Once we start giving out handles
     * to these collections, they'll be used in other threads sooner or later. 
     */
    private static java.util.Set wrapCollection(java.util.Set input) {
        return java.util.Collections.synchronizedSet(input);
    }
    /**
     * Covariant function. This is used in covariant form so that the compiler
     * can do some of our conditional branches for us. If I made these functions
     * have different names, then XDoclet would have to choose between them based on 
     * compiletime types, that wouldn't be easy. 
     */
    private static java.util.Collection wrapReadOnly(java.util.Collection input) {
        return java.util.Collections.unmodifiableCollection(input);
    }
    /**
     * Covariant function. This is used in covariant form so that the compiler
     * can do some of our conditional branches for us. If I made these functions
     * have different names, then XDoclet would have to choose between them based on 
     * compiletime types, that wouldn't be easy. 
     */
    private static java.util.Set wrapReadOnly(java.util.Set input) {
        return java.util.Collections.unmodifiableSet(input);
    }

    private final class ReadOnlyClientDTO 
    implements java.lang.Cloneable, java.io.Serializable 
    {
        private ClientDTO underlying() {
            return ClientDTO.this;
        }

       public java.lang.Integer getClientID() {
              return underlying().clientID;
       }

       public java.lang.String getClientName() {
              return underlying().clientName;
       }

       public java.lang.String getClientNumber() {
              return underlying().clientNumber;
       }

       public java.lang.Double getCreditLimit() {
              return underlying().creditLimit;
       }

       public java.lang.Boolean getBillable() {
              return underlying().billable;
       }

        public int hashCode() {
            return 101 * underlying().hashCode();
        }

        public boolean equals(Object o) {
            if(o instanceof ReadOnlyClientDTO) {
                return this.equals((ReadOnlyClientDTO) o);
            }
            return false;
        }

        public boolean equals(ReadOnlyClientDTO that) {
            if(null == that) {
                return false;
            }

            return this.underlying().equals(that.underlying());
        }

    }

}
